name: Production Deploy

on:
  push:
    tags:
      - 'v**'

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}
  GITHUB_ACTOR: ${{ github.actor }}

jobs:
  productionDeploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          submodules: recursive

      - name: Git Submodule Update
        run: |
          git submodule update --remote --recursive

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.GITHUB_ACTOR }}
          password: ${{ secrets.TOKEN_GITHUB }}

      - name: lowercase the image tag & repository
        run: |
          echo "REPOSITORY=$(echo $REPOSITORY | tr '[:upper:]' '[:lower:]')" >> ${GITHUB_ENV}

      - name: Set Spring Image Environment Variable
        run: |
          echo "SPRING_IMAGE=${{ env.REGISTRY }}/${{ env.REPOSITORY }}-prod:${{ env.VERSION }}" >> ${GITHUB_ENV}

      - name: Write Version
        run: |
          echo "\nserver-version: Prod" >> config/application.yml

      - name: Build Image
        run: docker build --no-cache -t ${{ env.SPRING_IMAGE }} -f Dockerfile-deploy .

      - name: Push
        run: docker push ${{ env.SPRING_IMAGE }}

      - name: Write Docker Image Tag Information to .env File
        run: |
          echo -e "\nSPRING_IMAGE=${{ env.SPRING_IMAGE }}" >> config/env/prod.env

      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_SSH_HOST }}
          port: ${{ secrets.PRODUCTION_SSH_PORT }}
          username: ${{ secrets.PRODUCTION_SSH_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml, config/env/prod.env"
          target: /home/ec2-user

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_SSH_HOST }}
          port: ${{ secrets.PRODUCTION_SSH_PORT }}
          username: ${{ secrets.PRODUCTION_SSH_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user 
            sudo docker login ${{ env.REGISTRY }} -u ${{ env.GITHUB_ACTOR }} -p ${{ secrets.TOKEN_GITHUB }}
            sudo docker container stop spring
            sudo docker container rm spring
            sudo docker-compose --env-file=config/env/prod.env -f docker-compose.prod.yml -p backend up -d
            sudo docker image prune -af